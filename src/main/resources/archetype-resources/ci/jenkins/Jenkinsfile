node{

    properties([
        parameters([
            string(name: 'GIT_URL',
                   description: "URL of project's git repository",
                   defaultValue: ''),
            credentials(name: 'GIT_CREDENTIALS',
                        description: 'Credentials for connection to git repository. Must be added to Jenkins instance.',
                        defaultValue: '',
                        required: true
                        credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl')
        ])
    ])

    stage('Checkout code'){
        git branch: "${BRANCH_NAME}", url: "${GIT_URL}", credentialsId: "${GIT_CREDENTIALS}"
    }

    stage('Compile'){
        docker.image('maven:3.6.3-openjdk-11').inside{
            sh 'mvn compile test-compile'
        }
    }

    stage('Test'){
        def unitTestsFailed = false
        try {
            docker.image('maven:3.6.3-openjdk-11').inside{
                sh 'mvn properties:read-project-properties@read-properties jacoco:prepare-agent@jacaco-prepare-agent surefire:test@unit-tests'
                sh 'mvn properties:read-project-properties@read-properties jacoco:check@jacoco-check'
            }
        } catch(Exception e) {
            unitTestsFailed = true
        } finally {
            junit 'target/surefire-reports/*.xml'
            sh 'mvn allure:report@allure-unit-report'
            sh 'mvn jacoco:report@jacoco-report'
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'target/site/allure/report/unit', reportFiles: 'index.html', reportName: 'Allure Unit Tests Report', reportTitles: ''])
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'target/site/jacoco', reportFiles: 'index.html', reportName: 'Coverage Report', reportTitles: ''])
        }
        if (unitTestsFailed) {
            error 'Unit tests failed'
        }
    }

    stage('Static analysis') {
        try {
            docker.image('maven:3.6.3-openjdk-11').inside{
                sh 'mvn jxr:jxr@jxr-xref-generation'
                sh 'mvn properties:read-project-properties@read-properties spotbugs:check@spotbugs-check'
                sh 'mvn properties:read-project-properties@read-properties pmd:check@pmd-analysis pmd:cpd-check@pmd-analysis'
                }
        } catch(Exception e) {
            error("ERROR: " + e)
        } finally {
            docker.image('maven:3.6.3-openjdk-11').inside{
                'mvn properties:read-project-properties@read-properties spotbugs:spotbugs@spotbug-report'
                }
            publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'target/site', reportFiles: 'spotbugs.html', reportName: 'Spot bugs', reportTitles: ''])
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'target/site', reportFiles: 'pmd.html', reportName: 'PMD Report', reportTitles: ''])
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'target/site', reportFiles: 'cpd.html', reportName: 'CopyPaste Report', reportTitles: ''])
        }
    }

    stage('Security scan') {
        echo 'TODO: Security scan'
    }

    stage('Integration tests'){
        def itTestsFailed = false
        try {
            docker.image('maven:3.6.3-openjdk-11').inside{
                sh 'mvn failsafe:integration-test@integration-tests'
            }
        } catch(Exception e) {
            itTestsFailed = true
        } finally {
            junit 'target/failsafe-reports/*.xml'
            sh 'mvn serenity:aggregate'
            sh 'mvn allure:report@allure-it-report'
            // needs some tweaking on jenkins to combine with unit test report
            //allure includeProperties: false, jdk: '', report: 'target/site/allure/report/it', results: [[path: 'allure/results/unit'], [path: 'allure/results/it']]
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'target/site/allure/report/it', reportFiles: 'index.html', reportName: 'Allure Integration Tests Report', reportTitles: ''])
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'target/site/serenity', reportFiles: 'index.html', reportName: 'Serenity Report', reportTitles: ''])
        }
        if (itTestsFailed) {
            error 'Integration tests failed'
        }
    }

    stage('Package'){
        docker.image('maven:3.6.3-openjdk-11').inside{
            sh 'mvn jar:jar spring-boot:repackage@spring-package'
        }
    }

    stage('Build docker image') {
        def dockerImageId = docker.build('ebank:latest', '-f ./docker/Dockerfile .')
    }

    stage('Push docker image') {
        echo 'TODO: Push docker'
    }

    stage('Remove docker image') {
        sh "docker image rm -f ${dockerImageId}"
    }
}
